// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tickets.Services;

namespace Tickets.Migrations
{
    [DbContext(typeof(TicketsDbContext))]
    [Migration("20200129023314_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079");

            modelBuilder.Entity("Tickets.Services.Event", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("EventName");

                    b.Property<string>("VenueName");

                    b.HasKey("EventId");

                    b.HasIndex("VenueName");

                    b.ToTable("Event");
                });

            modelBuilder.Entity("Tickets.Services.EventSeat", b =>
                {
                    b.Property<int>("EventSeatId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("EventId");

                    b.Property<decimal?>("EventSeatPrice");

                    b.Property<int>("SeatId");

                    b.HasKey("EventSeatId");

                    b.HasIndex("EventId");

                    b.HasIndex("SeatId");

                    b.ToTable("EventSeat");
                });

            modelBuilder.Entity("Tickets.Services.Row", b =>
                {
                    b.Property<int>("RowId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("RowName");

                    b.Property<int?>("SectionId");

                    b.HasKey("RowId");

                    b.HasIndex("SectionId");

                    b.ToTable("Row");
                });

            modelBuilder.Entity("Tickets.Services.Seat", b =>
                {
                    b.Property<int>("SeatId")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal?>("Price");

                    b.Property<int?>("RowId");

                    b.HasKey("SeatId");

                    b.HasIndex("RowId");

                    b.ToTable("Seat");
                });

            modelBuilder.Entity("Tickets.Services.Section", b =>
                {
                    b.Property<int>("SectionId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("SectionName");

                    b.Property<string>("VenueName");

                    b.HasKey("SectionId");

                    b.HasIndex("VenueName");

                    b.ToTable("Section");
                });

            modelBuilder.Entity("Tickets.Services.TicketPurchase", b =>
                {
                    b.Property<int>("PurchaseId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConfirmationCode");

                    b.Property<decimal>("PaymentAmount");

                    b.Property<string>("PaymentMethod");

                    b.HasKey("PurchaseId");

                    b.ToTable("TicketPurchase");
                });

            modelBuilder.Entity("Tickets.Services.TicketPurchaseSeat", b =>
                {
                    b.Property<int>("PurchaseId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("EventSeatId");

                    b.Property<int?>("PurchaseId1");

                    b.Property<decimal?>("SeatSubtotal");

                    b.HasKey("PurchaseId");

                    b.HasIndex("EventSeatId");

                    b.HasIndex("PurchaseId1");

                    b.ToTable("TicketPurchaseSeat");
                });

            modelBuilder.Entity("Tickets.Services.Venue", b =>
                {
                    b.Property<string>("VenueName")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("Capacity");

                    b.HasKey("VenueName");

                    b.ToTable("Venue");
                });

            modelBuilder.Entity("Tickets.Services.Event", b =>
                {
                    b.HasOne("Tickets.Services.Venue", "VenueNameNavigation")
                        .WithMany("Event")
                        .HasForeignKey("VenueName");
                });

            modelBuilder.Entity("Tickets.Services.EventSeat", b =>
                {
                    b.HasOne("Tickets.Services.Event", "Event")
                        .WithMany("EventSeat")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tickets.Services.Seat", "Seat")
                        .WithMany("EventSeat")
                        .HasForeignKey("SeatId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tickets.Services.Row", b =>
                {
                    b.HasOne("Tickets.Services.Section", "Section")
                        .WithMany("Row")
                        .HasForeignKey("SectionId");
                });

            modelBuilder.Entity("Tickets.Services.Seat", b =>
                {
                    b.HasOne("Tickets.Services.Row", "Row")
                        .WithMany("Seat")
                        .HasForeignKey("RowId");
                });

            modelBuilder.Entity("Tickets.Services.Section", b =>
                {
                    b.HasOne("Tickets.Services.Venue", "VenueNameNavigation")
                        .WithMany("Section")
                        .HasForeignKey("VenueName");
                });

            modelBuilder.Entity("Tickets.Services.TicketPurchaseSeat", b =>
                {
                    b.HasOne("Tickets.Services.EventSeat", "EventSeat")
                        .WithMany("TicketPurchaseSeat")
                        .HasForeignKey("EventSeatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tickets.Services.TicketPurchase", "Purchase")
                        .WithMany("TicketPurchaseSeat")
                        .HasForeignKey("PurchaseId1");
                });
#pragma warning restore 612, 618
        }
    }
}
